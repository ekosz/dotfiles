# ################################################################ #
# THE FOLLOWING IS AN EXPLANATION OF THE GRAMMAR THAT SKHD PARSES. #
# FOR SIMPLE EXAMPLE MAPPINGS LOOK FURTHER DOWN THIS FILE..        #
# ################################################################ #

# A list of all built-in modifier and literal keywords can
# be found at https://github.com/koekeishiya/skhd/issues/1
#
# A hotkey is written according to the following rules:
#
#   hotkey       = <mode> '<' <action> | <action>
#
#   mode         = 'name of mode' | <mode> ',' <mode>
#
#   action       = <keysym> '[' <proc_map_lst> ']' | <keysym> '->' '[' <proc_map_lst> ']'
#                  <keysym> ':' <command>          | <keysym> '->' ':' <command>
#                  <keysym> ';' <mode>             | <keysym> '->' ';' <mode>
#
#   keysym       = <mod> '-' <key> | <key>
#
#   mod          = 'modifier keyword' | <mod> '+' <mod>
#
#   key          = <literal> | <keycode>
#
#   literal      = 'single letter or built-in keyword'
#
#   keycode      = 'apple keyboard kVK_<Key> values (0x3C)'
#
#   proc_map_lst = * <proc_map>
#
#   proc_map     = <string> ':' <command> | <string>     '~' |
#                  '*'      ':' <command> | '*'          '~'
#
#   string       = '"' 'sequence of characters' '"'
#
#   command      = command is executed through '$SHELL -c' and
#                  follows valid shell syntax. if the $SHELL environment
#                  variable is not set, it will default to '/bin/bash'.
#                  when bash is used, the ';' delimeter can be specified
#                  to chain commands.
#
#                  to allow a command to extend into multiple lines,
#                  prepend '\' at the end of the previous line.
#
#                  an EOL character signifies the end of the bind.
#
#   ->           = keypress is not consumed by skhd
#
#   *            = matches every application not specified in <proc_map_lst>
#
#   ~            = application is unbound and keypress is forwarded per usual, when specified in a <proc_map>
#
# A mode is declared according to the following rules:
#
#   mode_decl = '::' <name> '@' ':' <command> | '::' <name> ':' <command> |
#               '::' <name> '@'               | '::' <name>
#
#   name      = desired name for this mode,
#
#   @         = capture keypresses regardless of being bound to an action
#
#   command   = command is executed through '$SHELL -c' and
#               follows valid shell syntax. if the $SHELL environment
#               variable is not set, it will default to '/bin/bash'.
#               when bash is used, the ';' delimeter can be specified
#               to chain commands.
#
#               to allow a command to extend into multiple lines,
#               prepend '\' at the end of the previous line.
#
#               an EOL character signifies the end of the bind.

# opens Alacritty
alt - return : Applications/Alacritty.app/Contents/MacOS/alacritty

# Navigation
alt - h : yabai -m window --focus west || yabai -m display --focus west
alt - j : yabai -m window --focus south
alt - k : yabai -m window --focus north
alt - l : yabai -m window --focus east || yabai -m display --focus east

# Moving windows
lctrl + alt - h : yabai -m window --warp west || $(yabai -m window --display west; yabai -m display --focus west)
lctrl + alt - j : yabai -m window --warp south
lctrl + alt - k : yabai -m window --warp north
lctrl + alt - l : yabai -m window --warp east || $(yabai -m window --display east; yabai -m display --focus east)

# Move focus container to workspace
lctrl + alt - m : yabai -m window --space last; yabai -m space --focus last
lctrl + alt - p : yabai -m window --space prev; yabai -m space --focus prev
lctrl + alt - n : yabai -m window --space next; yabai -m space --focus next
lctrl + alt - 1 : yabai -m window --space 1; yabai -m space --focus 1
lctrl + alt - 2 : yabai -m window --space 2; yabai -m space --focus 2
lctrl + alt - 3 : yabai -m window --space 3; yabai -m space --focus 3
lctrl + alt - 4 : yabai -m window --space 4; yabai -m space --focus 4

# Resize windows
shift + alt - h : yabai -m window --resize left:-50:0; \
                  yabai -m window --resize right:-50:0
shift + alt - j : yabai -m window --resize bottom:0:50; \
                  yabai -m window --resize top:0:50
shift + alt - k : yabai -m window --resize top:0:-50; \
                  yabai -m window --resize bottom:0:-50
shift + alt - l : yabai -m window --resize right:50:0; \
                  yabai -m window --resize left:50:0

# Equalize size of windows
shift + alt - e : yabai -m space --balance

# Enable / Disable gaps in current workspace
shift + lctrl + alt - g : yabai -m space --toggle padding; yabai -m space --toggle gap

# Rotate windows clockwise and anticlockwise
alt - r         : yabai -m space --rotate 270
lctrl + alt - r : yabai -m space --rotate 90

# Rotate on X and Y Axis
lctrl + alt - x : yabai -m space --mirror x-axis
lctrl + alt - y : yabai -m space --mirror y-axis

# Set insertion point for focused container
shift + lctrl + alt - h : yabai -m window --insert west
shift + lctrl + alt - j : yabai -m window --insert south
shift + lctrl + alt - k : yabai -m window --insert north
shift + lctrl + alt - l : yabai -m window --insert east

# Float / Unfloat window
lctrl + alt - space : yabai -m window --toggle float

# Toggle mode
shift + lctrl + alt - space : yabai -m space --layout $(yabai -m query --spaces --space | jq -r 'if .type == "bsp" then "float" else "bsp" end')

# Restart Yabai
shift + lctrl + alt - r : \
    osascript -e \
    "display notification \"Restarting Yabai\" with title \"Yabai\"" && \
    brew services restart yabai

# Make window native fullscreen
alt - f         : yabai -m window --toggle zoom-fullscreen
shift + alt - f : yabai -m window --toggle native-fullscreen
